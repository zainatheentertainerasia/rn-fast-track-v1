{"version":3,"sources":["createCompatNavigationProp.tsx"],"names":["helpers","createCompatNavigationProp","navigation","state","context","isFirstRouteInParent","parent","subscriptions","didFocus","Map","didBlur","refocus","Object","entries","reduce","acc","name","method","args","dispatch","original","addListener","type","callback","unsubscribe","listener","isFocused","set","Error","subscription","remove","removeListener","get","key","routeName","params","index","undefined","console","warn","routes","getParam","paramName","defaultValue","dangerouslyGetState","dangerouslyGetParent"],"mappings":"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","sourcesContent":["import type {\n  NavigationState,\n  PartialState,\n  ParamListBase,\n  NavigationProp,\n  RouteProp,\n} from '@react-navigation/native';\nimport * as helpers from './helpers';\nimport type { CompatNavigationProp } from './types';\n\ntype EventName =\n  | 'action'\n  | 'willFocus'\n  | 'willBlur'\n  | 'didFocus'\n  | 'didBlur'\n  | 'refocus';\n\nexport default function createCompatNavigationProp<\n  NavigationPropType extends NavigationProp<ParamListBase>,\n  ParamList extends ParamListBase = NavigationPropType extends NavigationProp<\n    infer P\n  >\n    ? P\n    : ParamListBase\n>(\n  navigation: NavigationPropType,\n  state:\n    | (RouteProp<ParamList, keyof ParamList> & {\n        state?: NavigationState | PartialState<NavigationState>;\n      })\n    | NavigationState\n    | PartialState<NavigationState>,\n  context: Record<string, any>,\n  isFirstRouteInParent?: boolean\n): CompatNavigationProp<NavigationPropType> {\n  context.parent = context.parent || {};\n  context.subscriptions = context.subscriptions || {\n    didFocus: new Map<() => void, () => void>(),\n    didBlur: new Map<() => void, () => void>(),\n    refocus: new Map<() => void, () => void>(),\n  };\n\n  return {\n    ...navigation,\n    ...Object.entries(helpers).reduce<{\n      [key: string]: (...args: any[]) => void;\n    }>((acc, [name, method]: [string, Function]) => {\n      if (name in navigation) {\n        acc[name] = (...args: any[]) => navigation.dispatch(method(...args));\n      }\n\n      return acc;\n    }, {}),\n    original: navigation,\n    addListener(type: EventName, callback: () => void) {\n      let unsubscribe: () => void;\n\n      switch (type) {\n        case 'willFocus':\n          unsubscribe = navigation.addListener('focus', callback);\n          break;\n        case 'willBlur':\n          unsubscribe = navigation.addListener('blur', callback);\n          break;\n        case 'didFocus': {\n          const listener = () => {\n            if (navigation.isFocused()) {\n              callback();\n            }\n          };\n\n          // @ts-expect-error: this event may not exist in this navigator\n          unsubscribe = navigation.addListener('transitionEnd', listener);\n          context.subscriptions.didFocus.set(callback, unsubscribe);\n          break;\n        }\n        case 'didBlur': {\n          const listener = () => {\n            if (!navigation.isFocused()) {\n              callback();\n            }\n          };\n\n          // @ts-expect-error: this event may not exist in this navigator\n          unsubscribe = navigation.addListener('transitionEnd', listener);\n          context.subscriptions.didBlur.set(callback, unsubscribe);\n          break;\n        }\n        case 'refocus': {\n          const listener = () => {\n            if (navigation.isFocused()) {\n              callback();\n            }\n          };\n\n          // @ts-expect-error: this event may not exist in this navigator\n          unsubscribe = navigation.addListener('tabPress', listener);\n          context.subscriptions.refocus.set(callback, unsubscribe);\n          break;\n        }\n        case 'action':\n          throw new Error(\"Listening to 'action' events is not supported.\");\n        default:\n          unsubscribe = navigation.addListener(type, callback);\n      }\n\n      const subscription = () => unsubscribe();\n\n      subscription.remove = unsubscribe;\n\n      return subscription;\n    },\n    removeListener(type: EventName, callback: () => void) {\n      context.subscriptions = context.subscriptions || {};\n\n      switch (type) {\n        case 'willFocus':\n          navigation.removeListener('focus', callback);\n          break;\n        case 'willBlur':\n          navigation.removeListener('blur', callback);\n          break;\n        case 'didFocus': {\n          const unsubscribe = context.subscriptions.didFocus.get(callback);\n          unsubscribe?.();\n          break;\n        }\n        case 'didBlur': {\n          const unsubscribe = context.subscriptions.didBlur.get(callback);\n          unsubscribe?.();\n          break;\n        }\n        case 'refocus': {\n          const unsubscribe = context.subscriptions.refocus.get(callback);\n          unsubscribe?.();\n          break;\n        }\n        case 'action':\n          throw new Error(\"Listening to 'action' events is not supported.\");\n        default:\n          navigation.removeListener(type, callback);\n      }\n    },\n    state: {\n      // @ts-expect-error: these properties may actually exist\n      key: state.key,\n      // @ts-expect-error\n      routeName: state.name,\n      // @ts-expect-error\n      params: state.params ?? {},\n      get index() {\n        // @ts-expect-error\n        if (state.index !== undefined) {\n          // @ts-expect-error\n          return state.index;\n        }\n\n        console.warn(\n          \"Looks like you are using 'navigation.state.index' in your code. Accessing child navigation state for a route is not safe and won't work correctly. You should refactor it not to access the 'index' property in the child navigation state.\"\n        );\n\n        // @ts-expect-error\n        return state.state?.index;\n      },\n      get routes() {\n        // @ts-expect-error\n        if (state.routes !== undefined) {\n          // @ts-expect-error\n          return state.routes;\n        }\n\n        console.warn(\n          \"Looks like you are using 'navigation.state.routes' in your code. Accessing child navigation state for a route is not safe and won't work correctly. You should refactor it not to access the 'routes' property in the child navigation state.\"\n        );\n\n        // @ts-expect-error\n        return state.state?.routes;\n      },\n    },\n    getParam<T extends keyof ParamList>(\n      paramName: T,\n      defaultValue: ParamList[T]\n    ): ParamList[T] {\n      // @ts-expect-error\n      const params = state.params;\n\n      if (params && paramName in params) {\n        return params[paramName];\n      }\n\n      return defaultValue;\n    },\n    isFirstRouteInParent(): boolean {\n      if (typeof isFirstRouteInParent === 'boolean') {\n        return isFirstRouteInParent;\n      }\n\n      const { routes } = navigation.dangerouslyGetState();\n\n      // @ts-expect-error\n      return routes[0].key === state.key;\n    },\n    dangerouslyGetParent() {\n      const parent = navigation.dangerouslyGetParent();\n\n      if (parent) {\n        return createCompatNavigationProp(\n          parent,\n          navigation.dangerouslyGetState(),\n          context.parent\n        );\n      }\n\n      return undefined;\n    },\n  } as any;\n}\n"]}